[
  {
    "path": "posts/2021-07-01-how-to-set-up-rasa/",
    "title": "How to set up RASA",
    "description": "A simple tutorial of setting up RASA opensource",
    "author": [
      {
        "name": "Danny Moon",
        "url": {}
      }
    ],
    "date": "2021-07-01",
    "categories": [],
    "contents": "\nIn this post, I’ll show you a basic set up tutorial of setting up RASA opensource on your local machine. I’m using mac OS, so it can be little different for Window users.\n1. Python Environment Setup\nFirst, python3 and pip3 are required to follow the instructions. If you have both of them, make a directory where you want to save all your chatbot files. From the directory, open a terminal.\nCheck if your Python environment is already configured.\n\nIf these packages are already installed, these commands should display version numbers for each step, and you can skip to the next step.\n2. Virtual Environment Setup\nWe don’t want to install packages for this project system-wide, so we will install packages for this project in a virtual environment. Reason for this is that we might want to run different versions of packages for different projects. They also let you install packages without root privileges.\nCreate a new virtual environment by choosing a Python interpreter and making a ./venv directory to hold it.\n\nActivate the virtual environment.\n\n3. Install Rasa Open Source\n Once this is done, you can run rasa init to initiate a rasa project.\nYou can find more detailed instructions of installation here. https://rasa.com/docs/rasa/installation/\n\n\n\n",
    "preview": {},
    "last_modified": "2021-07-14T10:55:30-06:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-06-01-what-is-rasa/",
    "title": "What is RASA?",
    "description": "Open Source AI",
    "author": [
      {
        "name": "Danny Moon",
        "url": {}
      }
    ],
    "date": "2021-05-19",
    "categories": [],
    "contents": "\nIntroduction to RASA\nFor my senior project, I built a chatbot for the Data Science program at BYU-Idaho. If you look at big companies like IBM, Facebook, Google, Microsoft or Amazon all are working extensively on it and each building their own framework. I came across to RASA from my faculty mentor and I started to build a chatbot with RASA.\nNow lets first understand what is RASA and what all it provides. RASA stack is an open-source AI tool and being an opensource framework, It is easy to customize.\nRasa comes up with 2 components —\nRasa NLU — a library for natural language understanding (NLU) which does the classification of intent and extract the entity from the user input and helps a chatbot to understand what the user is saying.\nRasa Core — a chatbot framework with machine learning-based dialogue management which takes the structured input from the NLU and predicts the next best action using a probabilistic model like LSTM neural network. NLU and Core are independent and one can use NLU without Core, and vice versa. Though Rasa recommends using both.\nHere is the flow of Rasa Before we further discuss, Let me explain a few keywords.\nIntent — Intent is nothing but what the user is aiming for. For example — if the user says “Reserve a time to talk to my professor tomorrow” the intent can be classified as to book a meeting.\nEntity — Entity is to extract the useful information from the user input. From the example above “Reserve a time to talk with my professor tomorrow” the entities extracted would be whom and time. Whom — professor and Time — tomorrow.\nStories — Stories define the sample interaction between the user and the chatbot in terms of intent and action taken by the bot. Like in the example above, bot got the intent of reserve a meeting and entities like whom and time but still, there is an entity missing — no of people and that would make the next action from the bot.\nActions — Actions are basically the operations performed by the bot either asking for some more details to get all the entities or integrating with some APIs or querying the database to get/save some information.\nNow as we know some basics, Let’s dive into some actual actions. In this post, we will majorly focus on the Rasa Natural Language Understanding (NLU) which comprises of Intent Classification & Entity extraction and create a structured output which can be fed into Rasa Core.\nRasa Natural Language Understanding (NLU)\nAs we already briefed on NLU above, we need to teach our bot to understand our messages first. For that, we have to train the NLU model with our inputs in a simple text format and extract structured data. We will achieve this by defining the intents and providing a few ways users might express them. To make this work, we need to define some files. Lets first understand these files.\nNLU training file: It contains some training data in terms of user inputs along with the mapping of intents and entities present in each of them. The more varying examples you provide, better your bot’s NLU capabilities become.\nStories file: This file contains sample interactions the user and bot will have. Rasa (Core) creates a probable model of interaction from each story.\nDomain file: This file lists all the intents, entities, actions, templates and some more information. The templates which I just mentioned is nothing but the sample bot reply which can be used as actions.\nMy Thoughts on RASA\nHere was my brief explanation on Rasa. I’ve never built a chatbot and Rasa was my first experience on chatbot. It had great documentation and Youtube tutorials to follow. Even if it was great, I can say that it’s really hard to make a good chatbot that could answer the all of the questions that users will be asking. You have to put in all of use cases in the training data. It’s very hard to come up with all the use cases. There is a better product called Rasa X and for me, it was pain and couldn’t make it work. Even if I wasn’t able to make Rasa X to work, but it is conversation driven AI and has much better feafure than Rasa open source.\n\n\n\n",
    "preview": {},
    "last_modified": "2021-06-24T21:17:23-06:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-05-13-creating-a-blog/",
    "title": "Creating a blog",
    "description": "Simple tutorial on how to create a blog using distill package and github",
    "author": [
      {
        "name": "Danny Moon",
        "url": {}
      }
    ],
    "date": "2021-05-13",
    "categories": [],
    "contents": "\nAs part of the senior project, I had to create a blog. There are many different tools that you could use to create a blog, but I chose distill package in R to create my blog. I would like to show how I created this blog using distill package in R with github. This post will show you very basic of creating a blog and a blog post.\nFirst, open up R studio and install distill package.\n\n\ninstall.packages(\"distill\")\n\n\n\nNext, go to github.com and create a repo. Name your repo name as your_github_userid.github.io. My example shows invalid because I already have my repo named in that convention.\n\nAfter you create your repo, copy the url of your repo and open R Studio again. \nIn R Studio, create a new project. When creating a new project, choose version control and choose git options.\n\n\nPaste the URL of your repo and select the directory that you want to save your file.\n\nAfter the project is created, run the following command to create a blog using distill package.\n\n\ndistill::create_blog(dir = getwd(), title = \"your blog name\")\n\n\n\ndir command let you choose where you want to create a blog. In this case, I’m creating a blog file to my current working directory and that is why I’m using getwe(). Name your blog in title.\nAfter you run the command and the blog files are created, you need to quit and restart the R studio.\nAfter you restart your R studio, you can find a Build tab on your right upper side panel of R Studio. Click Build tab and click Build Website.\nWhen it’s done, go to Files and find _site.yml and open it.\nChange the output_dir from site to docs.\nThen, push everything to github. After you push it to your github, go to your repo and click Settings.\nUnder settings, go to pages. Under Source change None to master. Change root to docs and click save. Then you will see something like this.\n Copy the url of your site that is shown in the above image and go to _site.yml in R Studio. Under the output_dir add a line and type base_url: and paste the url of yoru site. Save the _site.yml.\nNow let’s create a new blog post. Run the following command in your console.\n\n\ndistill::create_post(\"creating a blog\")\n\n\n\nYou will see a Rmd file with the name you just named for your post. I assume you are familiar with Rmd files and won’t explain much about editing your yml of Rmd. Edit yml of your Rmd file so it shows your name and correct url and etc.\nOnce you are done with editing your post, knit your Rmd file. Go to Build tab and click Build Website again. Then push everything to github. Now you can see your blog post if you go to your website’s url.\n\nGo to main page of your repo and click the gear button next to the about section. You can add a description of your repo and paste your website’s url under website field and save changes.\n\nYou have to do this process (knitting your rmd file, build website, and push it to github) whenever you create a new post. You can changed the theme of your Rmd file to change the theme of your blog and post. For more information about distill package, please visit https://rstudio.github.io/distill.\n\n\n\n",
    "preview": {},
    "last_modified": "2021-05-13T20:46:10-06:00",
    "input_file": {}
  }
]
